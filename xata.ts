// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Company",
    columns: [
      { name: "name", type: "text" },
      { name: "industry", type: "string" },
      { name: "foundedDate", type: "datetime" },
      { name: "walletAddress", type: "string" },
      { name: "privateKey", type: "string" },
    ],
    revLinks: [{ column: "companyId", table: "Customer" }],
  },
  {
    name: "Customer",
    columns: [
      { name: "name", type: "text" },
      { name: "email", type: "email" },
      { name: "phoneNumber", type: "string" },
      { name: "walletAddress", type: "string" },
      { name: "points", type: "float" },
      { name: "companyId", type: "link", link: { table: "Company" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Company = InferredTypes["Company"];
export type CompanyRecord = Company & XataRecord;

export type Customer = InferredTypes["Customer"];
export type CustomerRecord = Customer & XataRecord;

export type DatabaseSchema = {
  Company: CompanyRecord;
  Customer: CustomerRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Arindam-Dawn-s-workspace-8dhin7.us-east-1.xata.sh/db/monet-points",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
